import aiohttp
import asyncio
from base64 import b64decode
from io import BytesIO
import json
import urllib.parse
from typing import Dict

class WebScreenshot:
    def __init__(self, base_url: str):
        """
        Initialize the WebScreenshot class with a base URL.

        Args:
            base_url (str): The base URL for the screenshot API.
        """
        self.base_url = base_url
        self.session = aiohttp.ClientSession()  

    async def take_screenshot(self, question_dict: Dict[str, str], output_name: str = "screenshot.jpg") -> bool:
        """
        Take a screenshot of the webpage generated by the question dict.

        Args:
            question_dict (Dict[str, str]): The question data to be passed to the API.
            output_name (str, optional): The name of the output image file. Defaults to "screenshot.jpg".

        Returns:
            bool: True if the screenshot was saved successfully, False otherwise.
        """
        question_url_encoded = urllib.parse.quote(json.dumps(question_dict))
        url = f"{self.base_url}?question={question_url_encoded}"
        payload = {
            "url": url,
            "width": "480",
            "height": "427",
            "scale": 3,
            "full": True,
            "isTweet": False,
            "format": "jpeg"
        }

        async with self.session.post(
            "https://webscreenshot.vercel.app/api",
            json=payload,
        ) as response:
            response.raise_for_status()

            data = await response.json()
            if "image" not in data:
                return False

            image_base64 = data["image"].replace("data:image/jpeg;base64,", "")
            image_bytes = b64decode(image_base64)
            file = BytesIO(image_bytes)
            file.name = output_name
            with open(output_name, "wb") as f:
                f.write(file.getvalue())

        return True

    async def close(self) -> None:
        """Close the aiohttp client session"""
        await self.session.close()

# Example usage:
async def main():
    from AOI import qU
    import random
    base_url = "https://quest.zenova.workers.dev/"
    screenshot = WebScreenshot(base_url)

    question_dict = random.choice(qU)
    question = {
    "questionNumber": "9",
    "questionId": "32pexowdctxuvb6du5pl3xgdo",
    "chapterName": "Wave Optics",
    "difficulty": 3,
    "type": "Single",
    "content": "<p>In the figure shown, a parallel beam of light is incident on the plane of the slits of a Youngs double slit experiment. Light incident on the slit, \\( S_{1} \\) passes through a medium of variable refractive index \\( \\mu=1+a x \\) (where \\( x \\) is the distance from the plane of slits as shown), upto a distance \\( \\ell \\) before falling on \\( S_{1} \\). Rest of the space is filled with air. If at \\( O \\) a minima is formed, then the minimum value of the positive constant a (in terms of \\( \\ell \\) and wavelength \\( \\lambda \\) in air) is:</p>\n<p><img title=\"Capture.PNG\" src=\"https://d2bps9p1kiy4ka.cloudfront.net/5eb393ee95fab7468a79d189/f7aa2869-c2fb-47b6-88e8-dcf19007fbde.PNG\" alt=\"\" width=\"169\" height=\"124\" /></p>",
    "imageURL": "https://d2bps9p1kiy4ka.cloudfront.net/5eb393ee95fab7468a79d189/f7aa2869-c2fb-47b6-88e8-dcf19007fbde.PNG",
    "correctAnswer": "<p><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfrac><mi>&lambda;</mi><msup><mi>ℓ</mi><mn>2</mn></msup></mfrac></math></p>",
    "solutionVideo": "https://www.youtube.com/watch?v=OWsmy0du5EM",
    "options": [
      "<p>A. <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfrac><mi>&lambda;</mi><mi>ℓ</mi></mfrac></math></p>",
      "<p>B. <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfrac><mi>&lambda;</mi><msup><mi>ℓ</mi><mn>2</mn></msup></mfrac></math></p>",
      "<p>C. <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfrac><msup><mi>ℓ</mi><mn>2</mn></msup><mi>&lambda;</mi></mfrac></math></p>",
      "<p>D. None of these</p>"
    ]
  }
    if await screenshot.take_screenshot(question, "example_screensho.jpg"):
        print("Screenshot saved to example_screenshot.jpg")
    else:
        print("Failed to capture screenshot")

    await screenshot.close()  

if __name__ == "__main__":
    asyncio.run(main())